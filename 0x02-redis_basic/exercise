#!/usr/bin/env python3
"""
Handle Redis management for caching and service
"""
import redis
import uuid
from typing import Any
from functools import wraps


def count_calls(fn):
    @wraps(fn)
    def wrapper(self, *args, **kwargs):
        self.__redis.incr(fn.__qualname__)
        return fn(*args, **kwargs)
    return wrapper

def call_history(method):
    @wraps(method)
    def wrapper(self, *args, **kwargs):
        input_key = '{}:inputs'.format(method.__qualname__)
        self.__redis.rpush(input_key, str(args))
        output = method(*args, **kwargs)
        output_key = '{}:outputs'.format(method.__qualname__)
        return self.__redis.rpush(output_key, str(output))
    return wrapper

def replay(method):

class Cache:
    def __init__(self):
        """Initialize cache class"""
       self.__redis = redis.Redis()
       self.__redis.flushdb()

    @count_calls
    @call_history
    def store(self, data: Any) -> str:
        """ Store the given data on the redis server and return it's key"""
       rand_key = str(uuid.uuid4())
       self.__redis.set(rand_key, data)
       return rand_key

   def get(self, key, fn=None):
       """Fetch data from the redis server"""
       if fn:
           return fn(self.__redis.get(key))
       return self.__redis.get(key)

   def get_str(self, key):
       """Return the string representation of a value"""
       return self.get(key, lambda x: x.decode('utf-8'))

   def get_int(self, int):
       """Return the integer representation of a value"""
       return self.get(key, int)
